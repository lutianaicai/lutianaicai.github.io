<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://lutianaicai.github.io</id><title>李昊舒的博客</title><subtitle>不输出怎么进步</subtitle> <updated>2021-06-19T16:04:09+08:00</updated> <author> <name>李昊舒</name> <uri>https://lutianaicai.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lutianaicai.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 李昊舒 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>程序员的自我修养 ——链接、装载与库读书笔记（四）</title><link href="https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9B%9B/" rel="alternate" type="text/html" title="程序员的自我修养 ——链接、装载与库读书笔记（四）" /><published>2021-04-15T16:26:00+08:00</published> <updated>2021-04-15T19:38:00+08:00</updated> <id>https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9B%9B/</id> <content src="https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9B%9B/" /> <author> <name>李昊舒</name> </author> <category term="读书笔记" /> <summary> 此系列为我学习经典的读书笔记，目的是理清知识脉络帮助理解记忆，内容深度、质量远远不及原书。如果您对相关知识感兴趣，强烈建议阅读原书程序员的自我修养 带着问题学习 为什么要动态链接 动态链接的关键结构有哪些 动态链接有哪些步骤 为什么要动态链接 静态链接使得不同开发者或部门之间能够按模块开发，这大大提高了生产效率，与此同时静态链接的两个缺点也显现出来。一个是占用过大的磁盘空间，一个是模块更新困难问题。 内存和磁盘空间 静态链接方式对计算机内存和磁盘的空间浪费非常严重。 在现在的 Linux 系统中，一个普通程序会使用到的 C 语言静态库至少在 1 MB 以上，如果磁盘中有 2000 个这样的程序，就要浪费近 2 G 的磁盘空间。 程序开发和发布 除了空间浪费，静态链接的更新过程也非常麻烦，任何一个模块的任何更新都会导致程序的全量更新 动态链接... </summary> </entry> <entry><title>程序员的自我修养 ——链接、装载与库读书笔记（三）</title><link href="https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%89/" rel="alternate" type="text/html" title="程序员的自我修养 ——链接、装载与库读书笔记（三）" /><published>2021-03-31T19:12:00+08:00</published> <updated>2021-04-15T18:52:58+08:00</updated> <id>https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%89/</id> <content src="https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%89/" /> <author> <name>李昊舒</name> </author> <category term="读书笔记" /> <summary> 此系列为我学习经典的读书笔记，目的是理清知识脉络帮助理解记忆，内容深度、质量远远不及原书。如果您对相关知识感兴趣，强烈建议阅读原书程序员的自我修养 带着问题学习 静态链接中，输入的目标文件的各个段是如何被合并到输出文件的 链接器如何为他们分配在输出文件中的空间和地址 什么是 COMMON 块，未初始化的全局/静态变量为什么要使用它 空间与地址分配 对于链接器而言，链接主要过程就是将输入的目标文件加工合并成一个输出文件。那么，输出文件中的空间是如何分配给输入文件的呢？ 按序叠加 简单策略是按顺序叠加起来，但是问题同样明显。如果目标文件很多的话，输出文件会产生大量零散的段，造成内存空间大量的内部碎片，所以这不是很好的方案。 相似段合并 更实际的方法是将相似的段合并在一起，比如将所有目标文件的 “.text” 合并在一起，然后是 “.data” 段，... </summary> </entry> <entry><title>程序员的自我修养 ——链接、装载与库读书笔记（二）</title><link href="https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BA%8C/" rel="alternate" type="text/html" title="程序员的自我修养 ——链接、装载与库读书笔记（二）" /><published>2021-03-30T17:33:00+08:00</published> <updated>2021-04-15T18:52:58+08:00</updated> <id>https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BA%8C/</id> <content src="https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BA%8C/" /> <author> <name>李昊舒</name> </author> <category term="读书笔记" /> <summary> 此系列为我学习经典的读书笔记，目的是理清知识脉络帮助理解记忆，内容深度、质量远远不及原书。如果您对相关知识感兴趣，强烈建议阅读原书程序员的自我修养 带着问题学习 源代码到可执行文件都经历了哪些步骤 编译器做了什么工作 什么是静态链接，静态链接都包含哪些步骤 可执行文件的生成 源代码到可执行文件的生成可分为预处理（Prepressing）、编译（Compilation）、汇编（Assembly）和链接（Linking），四个步骤。 预处理 以 C 语言为例，预处理主要是处理源代码中以“#”开头的那些预处理指令，规则如下： 将所有 “#define” 删除并展开宏定义 处理所有条件预编译指令比如 “#if”、“#ifdef”、“#elif”、“#else”、“#endif” 处理 “#include” 预编译指令，将被包含的文件插入到预... </summary> </entry> <entry><title>程序员的自我修养 ——链接、装载与库读书笔记（一）</title><link href="https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%80/" rel="alternate" type="text/html" title="程序员的自我修养 ——链接、装载与库读书笔记（一）" /><published>2021-03-27T20:15:00+08:00</published> <updated>2021-04-15T18:52:58+08:00</updated> <id>https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%80/</id> <content src="https://lutianaicai.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%80/" /> <author> <name>李昊舒</name> </author> <category term="读书笔记" /> <summary> 此系列为我学习经典的读书笔记，目的是理清知识脉络帮助理解记忆，内容深度、质量远远不及原书。如果您对相关知识感兴趣，强烈建议阅读原书程序员的自我修养 带着问题学习 计算机的软硬件基本结构是什么 计算机如何充分利用 CPU 以及内存 线程是什么，什么是线程安全，如何保证线程安全 计算机的软硬件基本结构 对于软件开发者来说，计算机硬件抓住三个关键部位 CPU、内存和 I/O 控制芯片 硬件框架 早期计算机 CPU、内存和 I/O 设备等都是直接连接在总线（BUS）上。 后来随着 CPU 运行速度的不断提高，慢速的 IO 总线已经无法满足功能需求。人们就把总线拆分成了连接低速设备的南桥键与连接高速芯片的北桥。键盘、鼠标之类都连接在南桥。CPU、内存连接在北桥。 虽然设计更加复杂，但是基本架构没有离开CPU、内存和 I/O 控制芯片这三个关键硬件部位... </summary> </entry> <entry><title>Github Pages 博客迁移阿里云</title><link href="https://lutianaicai.github.io/posts/Github-Pages-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%98%BF%E9%87%8C%E4%BA%91/" rel="alternate" type="text/html" title="Github Pages 博客迁移阿里云" /><published>2021-02-09T18:15:00+08:00</published> <updated>2021-02-09T18:15:00+08:00</updated> <id>https://lutianaicai.github.io/posts/Github-Pages-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%98%BF%E9%87%8C%E4%BA%91/</id> <content src="https://lutianaicai.github.io/posts/Github-Pages-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%98%BF%E9%87%8C%E4%BA%91/" /> <author> <name>李昊舒</name> </author> <category term="技术杂谈" /> <summary> 虽然没什么人看，但是还是想把博客搭建在自己服务器上，也算是锻炼锻炼动手能力（纯折腾），也给想要迁移的同学做一个简单的分享。 前期准备 博客打包文件夹 我的博客使用 jekyll 搭建 编译 jekyll build 项目中的 _site 目录就是编译后的博客 服务器购买 我选择了一台阿里云 CentOS 7.3 轻量应用服务器 域名绑定 购买一个喜欢的域名阿里云也有相应支持, 然后进行服务器绑定。 服务器配置 博客项目部署 把博客项目放入指定文件夹 scp -r _site文件夹本地目录 root@服务器公网ip:目标目录 nginx 配置 使用 nginx 管理 Web 服务 安装 yum install nginx 打开配置文件 vi /etc/nginx/nginx.conf 修改相应配置 blog location 替... </summary> </entry> </feed>
