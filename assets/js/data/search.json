[ { "title": "程序员的自我修养 ——链接、装载与库读书笔记（四）", "url": "/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9B%9B/", "categories": "读书笔记", "tags": "动态链接", "date": "2021-04-15 16:26:00 +0800", "snippet": " 此系列为我学习经典的读书笔记，目的是理清知识脉络帮助理解记忆，内容深度、质量远远不及原书。如果您对相关知识感兴趣，强烈建议阅读原书程序员的自我修养带着问题学习 为什么要动态链接 动态链接的关键结构有哪些 动态链接有哪些步骤为什么要动态链接静态链接使得不同开发者或部门之间能够按模块开发，这大大提高了生产效率，与此同时静态链接的两个缺点也显现出来。一个是占用过大的磁盘空间，一个是模块更新困难问题。内存和磁盘空间静态链接方式对计算机内存和磁盘的空间浪费非常严重。在现在的 Linux 系统中，一个普通程序会使用到的 C 语言静态库至少在 1 MB 以上，如果磁盘中有 2000 个这样的..." }, { "title": "程序员的自我修养 ——链接、装载与库读书笔记（三）", "url": "/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%89/", "categories": "读书笔记", "tags": "静态链接", "date": "2021-03-31 19:12:00 +0800", "snippet": " 此系列为我学习经典的读书笔记，目的是理清知识脉络帮助理解记忆，内容深度、质量远远不及原书。如果您对相关知识感兴趣，强烈建议阅读原书程序员的自我修养带着问题学习 静态链接中，输入的目标文件的各个段是如何被合并到输出文件的 链接器如何为他们分配在输出文件中的空间和地址 什么是 COMMON 块，未初始化的全局/静态变量为什么要使用它空间与地址分配对于链接器而言，链接主要过程就是将输入的目标文件加工合并成一个输出文件。那么，输出文件中的空间是如何分配给输入文件的呢？按序叠加简单策略是按顺序叠加起来，但是问题同样明显。如果目标文件很多的话，输出文件会产生大量零散的段，造成内存空间大量的..." }, { "title": "程序员的自我修养 ——链接、装载与库读书笔记（二）", "url": "/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BA%8C/", "categories": "读书笔记", "tags": "编译, 静态链接", "date": "2021-03-30 17:33:00 +0800", "snippet": " 此系列为我学习经典的读书笔记，目的是理清知识脉络帮助理解记忆，内容深度、质量远远不及原书。如果您对相关知识感兴趣，强烈建议阅读原书程序员的自我修养带着问题学习 源代码到可执行文件都经历了哪些步骤 编译器做了什么工作 什么是静态链接，静态链接都包含哪些步骤可执行文件的生成源代码到可执行文件的生成可分为预处理（Prepressing）、编译（Compilation）、汇编（Assembly）和链接（Linking），四个步骤。预处理以 C 语言为例，预处理主要是处理源代码中以“#”开头的那些预处理指令，规则如下： 将所有 “#define” 删除并展开宏定义 处理所有条件预编译..." }, { "title": "程序员的自我修养 ——链接、装载与库读书笔记（一）", "url": "/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5-%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%80/", "categories": "读书笔记", "tags": "硬件, 操作系统, 线程, 基础", "date": "2021-03-27 20:15:00 +0800", "snippet": " 此系列为我学习经典的读书笔记，目的是理清知识脉络帮助理解记忆，内容深度、质量远远不及原书。如果您对相关知识感兴趣，强烈建议阅读原书程序员的自我修养带着问题学习 计算机的软硬件基本结构是什么 计算机如何充分利用 CPU 以及内存 线程是什么，什么是线程安全，如何保证线程安全计算机的软硬件基本结构对于软件开发者来说，计算机硬件抓住三个关键部位 CPU、内存和 I/O 控制芯片硬件框架早期计算机 CPU、内存和 I/O 设备等都是直接连接在总线（BUS）上。后来随着 CPU 运行速度的不断提高，慢速的 IO 总线已经无法满足功能需求。人们就把总线拆分成了连接低速设备的南桥键与连接高速..." }, { "title": "Github Pages 博客迁移阿里云", "url": "/posts/Github-Pages-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%98%BF%E9%87%8C%E4%BA%91/", "categories": "技术杂谈", "tags": "nginx, Travis, 博客迁移, 服务器", "date": "2021-02-09 18:15:00 +0800", "snippet": "虽然没什么人看，但是还是想把博客搭建在自己服务器上，也算是锻炼锻炼动手能力（纯折腾），也给想要迁移的同学做一个简单的分享。前期准备博客打包文件夹我的博客使用 jekyll 搭建编译jekyll build项目中的 _site 目录就是编译后的博客服务器购买我选择了一台阿里云 CentOS 7.3 轻量应用服务器域名绑定购买一个喜欢的域名阿里云也有相应支持, 然后进行服务器绑定。服务器配置博客项目部署把博客项目放入指定文件夹scp -r _site文件夹本地目录 root@服务器公网ip:目标目录nginx 配置使用 nginx 管理 Web 服务安装yum install nginx打开..." }, { "title": "2020 年终总结", "url": "/posts/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/", "categories": "年终总结", "tags": "年终总结", "date": "2021-01-25 18:44:00 +0800", "snippet": "距离上次写博客已经过去快两年了，可以说第一次搭建起博客之后写了 3 篇分析就放弃了。本着不输出怎么进步的思想，这次下定决心把博客写起来。把原来在 Github Pages 的博客迁移到了新服务器，买了域名，换了主题。基本上就是重新搭建了一遍，就以这篇 2020 的终点作为新起点吧。关于学习今年参加了极客大学的算法训练营和前端进阶训练营课程。算法程序 = 数据结构 + 算法。非科班出身的我，没有系统学习算法的经验，总有相声演员不会太平歌词短门手艺让人瞧不起的感觉。2020 年 leetcode 一共 605 次提交刷了 200 题左右。数量不多，也没有坚持每天刷。但多少建立了数据结构跟算法..." }, { "title": "PromiseKit 源码分析", "url": "/posts/PromiseKit%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/", "categories": "iOS", "tags": "源码分析", "date": "2019-03-31 00:00:00 +0800", "snippet": "面对回调地狱 PromiseKit 提供了一种简洁易用的异步编程模式。让你可以编写出更加易读，更加专注结果的代码。本文意在探寻简介背后的逻辑。从最小类型谈去搞清复杂封装的源码中最基本的类型就好比搞清一篇英文文章中所有看不懂的生词的意思。再想看懂文章，只需要把已知信息串联起来就行了。Boxbox 是 PromiseKit 中基本的类，在介绍它之前，先得说一下同样定义在Box.swift中的另外两个更小的类型 Sealant 和 Handlersenum Sealant&amp;lt;R&amp;gt; { case pending(Handlers&amp;lt;R&amp;gt;)..." }, { "title": "SVProgressHUD 源码分析", "url": "/posts/SVProgressHUD%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/", "categories": "iOS", "tags": "源码分析", "date": "2018-11-06 00:00:00 +0800", "snippet": "众所周知 SVProgressHUD 是一个简洁易用的 HUD 库，我想探寻简洁易用背后的原理。SingletonSVProgressHUD 同 MBProgressHUD 一样，都是 UIView 的子类，不同与 MB , SV 提供的是单例，这也是它简洁的一大因素。+ (SVProgressHUD*)sharedView { static dispatch_once_t once; static SVProgressHUD *sharedView;#if !defined(SV_APP_EXTENSIONS) dispatch_once(&amp;amp;o..." }, { "title": "Kingfisher 源码分析", "url": "/posts/Kingfisher%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/", "categories": "iOS", "tags": "源码分析", "date": "2018-10-24 00:00:00 +0800", "snippet": "最近解决公司项目缓存问题时候发现自己对沙盒理解还不深刻，就从项目中看了一下喵神的实现，惊叹于 Kingfisher 这个库的整洁规范。所以就萌生了写一篇文章记录阅读源码这件事情的意愿。从接口谈起首先还是要稍微介绍一下 Kingfisher: Kingfisher is a lightweight, pure-Swift library for downloading and caching images from the web. This project is heavily inspired by the popular SDWebImage. It provides you a ..." } ]
